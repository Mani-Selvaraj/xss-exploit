import requests
from pprint import pprint
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin


def get_form_tags(url):
    """argument: url, returns form tag in HTML """
    soup = bs(requests.get(url).content, "html.parser")
    return soup.find_all("form")


def get_form_tags_details(form):
    """
    Data extraction from HTML `form` tag
    """
    form_details = {}
    # get form action
    action = form.attrs.get("action", "").lower()
    # get form method (POST, GET, TRACE, DELETE, OPTIONS,etc.)
    method = form.attrs.get("method", "get").lower()
    # get input details
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    # resulting dictionary
    form_details["action"] = action
    form_details["method"] = method
    form_details["inputs"] = inputs
    return form_details


def submit_form_tags(form_details, url, value):
    """
    Submits a form given in `form_details`
    Params:
        arguments: form_details, url, value returns the HTTP Response after form submission
    """
    # construct the full URL
    target_url = urljoin(url, form_details["action"])
    # get the inputs
    inputs = form_details["inputs"]
    form_data = {}
    for input in inputs:
        # replace all text and search values with `value`
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            # if input name and value are not None, 
            # then add them to the data of form submission
            form_data[input_name] = input_value

    print(f"[+] Submitting payload to {target_url}")
    print(f"[+] Data: {form_data}")
    if form_details["method"] == "post":
        return requests.post(target_url, data=form_data)
    else:
        # GET request
        return requests.get(target_url, params=form_data)


def parse_xss(url):
    """
    Given a `url`, it prints all XSS parameter and 
    returns True if any is vulnerable, False otherwise
    """
    # get all the forms from the URL
    forms = get_form_tags(url)
    print(f"[+] Detected {len(forms)} forms on {url}.")
    js_script = "<Script>alert('XSS')</scripT>"
    # returning value
    is_vulnerable = False
    ## iterate over all forms
    for form in forms:
        form_details = get_form_tags_details(form)
        content = submit_form_tags(form_details, url, js_script).content.decode()
        if js_script in content:
            print(f"[+] XSS affected {url}")
            print(f"[*] Form detail:")
            pprint(form_details)
            is_vulnerable = True
    return is_vulnerable


if __name__ == "__main__":
    import sys
    url = sys.argv[1]
    print(parse_xss(url))
